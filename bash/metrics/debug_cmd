#!/bin/bash

NAME=$(basename $BASH_SOURCE)
BASE=$(dirname $BASH_SOURCE)

args=()
method=normal
gdb_cmds=(-ex "set print object on" -ex "skip file util/CountedPtr.h")
valgrind_mem_opts=("-v" "--leak-check=full" \
	       "--trace-children=yes" \
	       #"--trace-children-skip=*" \
	       "--track-origins=yes" \
	       "--show-leak-kinds=all" \
	       #"--suppressions=*" \
	       "--error-limit=no")
callgrind_ops=("--trace-children=yes")

memusage_interval=0.5
function now()
{
    printf '%.3f' $(date +%s.%N)
}

function memusage_exec()
{
    local ref=$(now)
    "${@}" &
    local pid=$!

    echo "Time,Memory(kB)" | tee memusage.txt
    while true
    do
        n=$(now)
        mem=$(pmap -x $pid | grep total | awk '{print $3}')
        if [ -z "$mem" ]
        then
            break
        fi
       
        d=$(perl -E "say $n - $ref")
        echo $(printf "%0.3f" $d),$mem | tee -a memusage.txt
        sleep $memusage_interval 
    done
    wait
}

cmd=${NAME:1:${#NAME}-1}
pre=""
for arg in "$@"; do
	case "$arg" in
                -cmd=*)
                        cmd=$(echo $arg | sed "s/-cmd=//")
                        ;;
                -pre=*)
                        pre=$(echo $arg | sed "s/-pre=//")
                        ;;
		-gdb)
			method=gdb
			;;
		-gdbb=*)
			method=gdb
			bp=$(echo $arg | sed "s/-gdbb=//")
			gdb_cmds=("${gdb_cmds[@]}" -ex "break $bp")
			;;
		-gdbc=*)
			method=gdb
			cmd=$(echo $arg | sed "s/-gdbc=//")
			gdb_cmds=("${gdb_cmds[@]}" -ex "$cmd")
			;;
                -memusage)
                        method=memusage
                        ;;
                -memusage=*)
                        method=memusage
                        memusage_interval=$(echo $arg | sed "s/-memusage=//")
                        ;;
		-memory)
			method=memory
			;;
                -memorysupp=*)
                        method=memory
                        supp=$(echo $arg | sed "s/-memorysupp=//")
                        valgrind_mem_opts+=(--suppressions=$supp)
                        ;;
                -profile)
                        method=profile
                        ;;
                -profileoutf=*)
                        method=profile
                        outf=$(echo $arg | sed "s/-profileoutf=//")
                        callgrind_opts+=(--callgrind-out-file=$outf)
                        ;;
		*)
			args=("${args[@]}" "$arg")
			;;
	esac	
done

fcmd=$(which $cmd)
if [ ! -z "$pre" ]; then $pre "${args[@]}"; fi

case $method in
	gdb)
                echo "** GDB (${gdb_cmds[@]}) **"
		gdb "${gdb_cmds[@]}" -ex run --args $fcmd "${args[@]}" 
		;;
        memusage)
                echo "** Memory Usage **"
                memusage_exec $fcmd "${args[@]}"
                ;;
	memory)
		echo "** Valgrind **"
                log_file=VALGRIND.$(basename $cmd).$$.out
		valgrind ${valgrind_mem_opts[@]} --log-file=${log_file} $fcmd "${args[@]}"
		;;
        profile)
                echo "** Profiling **"
                log_file=CACHEGRIND.$(basename $cmd).$$.out
                valgrind --tool=callgrind ${callgrind_opts[@]} --log-file=${log_file} $fcmd "${args[@]}"
                ;;
	normal)
		$fcmd "${args[@]}"
		;;
esac
