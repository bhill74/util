#!/usr/bin/python3

import os
import sys
import getopt
import gitlab
import json
import re


try:
    opts, other = getopt.getopt(sys.argv[1:],
                                "t:d:p:o:i:nh",
                                ("token=", "domain=", "project=",
                                 "operation=",
                                 "noopt",
                                 "help"))
except getopt.GetoptError as err:
    print(str(err))
    sys.exit(2)


def usage():
    program = os.path.basename(sys.argv[0])
    print("Usage: {} [-t/--token <TOKEN>] [-d/--domain <DOMAIN>] "
          "[-p/--project <PROJECT>] "
          "[-o/--operation <OP>]"
          "[-h/--help]".format(program))
    print("Used to report information from a specific pipeline")
    print("  -h, --help         Display this help information")
    print("  -t, --token        The GitLab token to use in the query")
    print("  -d, --domain       The GitLab domain")
    print("  -p, --project      The full project name from the GitLab server")
    print("  -o, --operation    The operation to perform on the project")
    print("  -n, --noopt        Perform no operations\n")
    print("Report bugs to: brian.hill@metrics.ca\n")


project_name = 0
domain = 0
token = 0
operation = None
preview = 0

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)

    if o in ('-d', '--domain'):
        domain = a

    if o in ('-t', '--token'):
        token = a

    if o in ('-p', '--project'):
        project_name = a

    if o in ('-o', '--operation'):
        operation = a

    if o in ('-n', '--noopt'):
        preview = 1

project = gitlab.Project(project_name, preview=preview)

if operation == "info":
    print(json.dumps(project.info(), indent=2))

match = re.match('^artifacts=(.*)$', operation)
if match:
    branch = None
    job_name = 'default'
    filename = 'default.zip'
    items = match.group(1).split(':')

    if len(items) == 3:
        branch = items[0]
        job_name = items[1]
        filename = items[2]

    elif len(items) == 2:
        job_name = items[0]
        filename = items[1]

    elif len(items) == 1:
        job_name = items[0]
        filename = "{}.zip".format(job_name)

    project.artifactsByName(branch, job_name, filename)
