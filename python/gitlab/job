#!/usr/bin/python3 -b

import os
import sys
import getopt
import gitlab
import json
import re


try:
    opts, other = getopt.getopt(sys.argv[1:],
                                "t:d:p:o:i:nh",
                                ("token=", "domain=", "project=",
                                 "id=", "operation=",
                                 "noopt",
                                 "help"))
except getopt.GetoptError as err:
    print(str(err))
    sys.exit(2)


def usage():
    program = os.path.basename(sys.argv[0])
    print("Usage: {} [-t/--token <TOKEN>] [-d/--domain <DOMAIN>] "
          "[-p/--project <PROJECT>] "
          "[-o/--operation <OP>]"
          "[-h/--help]".format(program))
    print("Used to report information from a specific pipeline")
    print("  -h, --help         Display this help information")
    print("  -t, --token        The GitLab token to use in the query")
    print("  -d, --domain       The GitLab domain")
    print("  -p, --project      The full project name from the GitLab server")
    print("  -i, --id           The ID of the job")
    print("  -o, --operation    The operation to perform on the pipeline")
    print("  -n, --noopt        Perform no operations\n")
    print("Report bugs to: brian.hill@metrics.ca\n")


project_name = 0
domain = 0
token = 0
operation = None
job_id = 0
preview = 0

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)

    if o in ('-d', '--domain'):
        domain = a

    if o in ('-t', '--token'):
        token = a

    if o in ('-p', '--project'):
        project_name = a

    if o in ('-i', '--id'):
        job_id = a

    if o in ('-o', '--operation'):
        operation = a

    if o in ('-n', '--noopt'):
        preview = 1

job = gitlab.Job(project_name, 0, job_id, preview=preview)

if operation == "hierarchy":
    print(json.dumps(job.hierarchy(), indent=2))

if operation == "history":
    print(json.dumps(job.history(), indent=2))

elif operation == "status":
    print(job.status())

elif operation == "overallStatus":
    print(job.overallStatus())

elif operation == "trace":
    print(job.trace())

elif operation == "info":
    print(json.dumps(job.info(), indent=2))

match = re.match('^artifacts(=(.*))?$', operation)
if match:
    filename = match.group(2)
    if not filename:
        info = job.info()
        if 'artifacts_file' in info and 'filename' in info['artifacts_file']:
            filename = info['artifacts_file']['filename']
        else:
            filename = "{}.artifacts.tar.gz".format(job_id)

    job.artifacts(filename)
