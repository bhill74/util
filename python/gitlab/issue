#!/usr/bin/python3 -b

import os
import sys
import getopt
import json


# Personal modules
sys.path.append(os.path.join(os.getenv('HOME'), "lib", "gitlab"))
import gitlab


try:
    opts, other = getopt.getopt(sys.argv[1:],
                                "t:d:p:o:i:nh",
                                ("token=", "domain=", "project=",
                                 "id=", "operation=",
                                 "noopt",
                                 "help"))
except getopt.GetoptError as err:
    print(str(err))
    sys.exit(2)


def usage():
    program = os.path.basename(sys.argv[0])
    print("Usage: {} [-t/--token <TOKEN>] [-d/--domain <DOMAIN>] "
          "[-p/--project <PROJECT>] "
          "[-o/--operation <OP>]"
          "[-h/--help]".format(program))
    print("Used to report information from a specific pipeline")
    print("  -h, --help         Display this help information")
    print("  -t, --token        The GitLab token to use in the query")
    print("  -d, --domain       The GitLab domain")
    print("  -p, --project      The full project name from the GitLab server")
    print("  -i, --id           The ID of the pipeline")
    print("  -o, --operation    The operation to perform on the pipeline")
    print("  -n, --noopt        Perform no operations\n")
    print("Report bugs to: brian.hill@metrics.ca\n")


project_name = 0
domain = 0
token = 0
operation = None
issue_id = 0
preview = 0

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)

    if o in ('-d', '--domain'):
        domain = a

    if o in ('-t', '--token'):
        token = a

    if o in ('-p', '--project'):
        project_name = a

    if o in ('-i', '--id'):
        issue_id = a

    if o in ('-o', '--operation'):
        operation = a

    if o in ('-n', '--noopt'):
        preview = 1

issue = gitlab.Issue(project_name, issue_id, preview=preview)


def reassign(issue, new_user, old_labels=None, new_labels=None):
    ops = {}
    if old_labels:
        ops['remove_labels'] = old_labels

    if new_labels:
        ops['add_labels'] = new_labels

    users = gitlab.Users()
    u = users.bySearch(new_user)
    if len(u) != 1:
        print("No single user found using '{}'".format(new_user))
        return

    ops['assignee_id'] = u[0].id()
    issue.edit(ops)
    issue.add_note("Assigned to {} for review".format(u[0].name()))

#issue.edit({'add_labels': 'CCDD'}, quiet=False)
reassign(issue, 'Shona', 'BBCC', 'AABB')


if operation == "history":
    print(json.dumps(issue.history(), indent=2))

elif operation == "state":
    print(issue.state())

elif operation == "info":
    print(json.dumps(issue.info()))
