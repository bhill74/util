#!/usr/bin/python3 -b

import getopt
import metrics_fibery
import sys
import re
import os
import colorama
from colorama import Fore, Style


colorama.init(autoreset=True)


try:
    opts, terms = getopt.getopt(sys.argv[1:],
                                "t:d:s:",
                                ("token=", "domain=", "source="))
except getopt.GetoptError as err:
    print(str(err))
    sys.exit(2)


def usage():
    program = os.path.basename(sys.argv[0])
    print("Usage: {} [-t/--token <TOKEN>] [-d/--domain <DOMAIN>] "
          "[-s/--source <SRC>] "
          "[-h/--help]".format(program))
    print("Used to search the comments from a specific source in fibery.\n")
    print("  -h, --help         Display this help information")
    print("  -t, --token        The Fibery token to use in the query")
    print("  -s, --source       The source database to use\n")
    print("Report bugs to: brian.hill@metrics.ca\n")


sources = None
domain = None
token = None

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)

    if o in ('-d', '--domain'):
        domain = a

    if o in ('-t', '--token'):
        token = a

    if o in ('-s', '--source'):
        if not sources:
            sources = []

        sources.append(a)

if not sources:
    sources = metrics_fibery.getDatabaseNames()

terms = [t.lower() for t in terms]
term_patterns = [re.compile(t, re.IGNORECASE) for t in terms]


def terms_highlight(terms, line):
    for t in terms:
        line = re.sub(t, (Fore.RED + '\g<0>' + Style.RESET_ALL), line)

    return line


for s in sources:
    db = metrics_fibery.getDatabase(s)
    if not s:
        continue

    for pid, r in db.search(terms).items():
        item = db.byFiberyId(r['fibery/id'])
        print("{}: {} [{}]".format(Fore.RED + pid + Style.RESET_ALL, Fore.GREEN + item.name() + Style.RESET_ALL, Fore.CYAN + item.link() + Style.RESET_ALL))

        for k in r.keys():
            if not isinstance(r[k], list):
                continue

            c = [terms_highlight(term_patterns, l) for l in r[k]]
            name = k.split('/')[1].replace('-', ' ').title()
            indent = "    {}: ".format(Fore.YELLOW + name + Style.RESET_ALL)
            print(indent + ("\n" + indent).join(c))
